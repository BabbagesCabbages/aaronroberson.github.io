<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aaron Roberson</title>
    <description>Personal blog and speaking schedule of Aaron Roberson, a JavaScript and AngularJS enthusiast specializing in the development of rich internet applications with a thick front-end.</description>
    <link>http://pixelpolished.com/</link>
    <atom:link href="http://pixelpolished.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 26 Oct 2014 11:31:33 -0700</pubDate>
    <lastBuildDate>Sun, 26 Oct 2014 11:31:33 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Geekwise Academy: Web Applications in JavaScript</title>
        <description>&lt;p&gt;In this course we’ll be covering the core concepts for building functional web applications using the MEAN stack: &lt;a href=&quot;http://mongodb.com&quot;&gt;MongoDB&lt;/a&gt;, &lt;a href=&quot;http://epxressjs.com&quot;&gt;Express.js&lt;/a&gt;, &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt;, and &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;course-description&quot;&gt;Course Description&lt;/h2&gt;

&lt;p&gt;We are going to spend the first few classes learning noSQL database concepts and &lt;a href=&quot;http://mongodb.com&quot;&gt;MongoDB&lt;/a&gt;. We’ll install and run MongoDB on our local machines and will cover the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shell commands&lt;/li&gt;
  &lt;li&gt;Database methods&lt;/li&gt;
  &lt;li&gt;Collection methods including CRUD (Create, Read, Update, Delete) operations&lt;/li&gt;
  &lt;li&gt;MongoDB Utilities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, we’ll spend a few classes on &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;http://epxressjs.com&quot;&gt;Express.js&lt;/a&gt; learning the following concepts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Server-side routing&lt;/li&gt;
  &lt;li&gt;RESTful APIs using the &lt;a href=&quot;http://mongoosejs.com&quot;&gt;Mongoose ODM&lt;/a&gt; middleware library&lt;/li&gt;
  &lt;li&gt;OAuth (Facebook, Google, Twitter, etc.) and email/password authentication using &lt;a href=&quot;http://passportjs.org&quot;&gt;Passport.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Role-based security. &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripe.com&quot;&gt;Stripe&lt;/a&gt; integration (customer, billing and order history)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The remaining portion of the class will be spent learning and using &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt; MVC/MVVM framework to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perform client-side routing&lt;/li&gt;
  &lt;li&gt;Client-side, role-based authentication&lt;/li&gt;
  &lt;li&gt;Create a user profile module where users will be able to manage their account profile including their billing and shipping addresses, credit card information and order history.&lt;/li&gt;
  &lt;li&gt;Create an admin module where application admins will be able to manage site users, orders and products (adding, updating and deleting products).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, we’ll deploy our application to the cloud using a PaaS (Platform as a Service) solution such as &lt;a href=&quot;http://openshift.com&quot;&gt;OpenShift&lt;/a&gt;, &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot;&gt;Microsoft Azure&lt;/a&gt; or the service of your choice.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;Here are what I would consider to be the basic pre-requisites:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Good understanding of HTML and CSS&lt;/li&gt;
  &lt;li&gt;Working understanding of the DOM (Document Object Model)&lt;/li&gt;
  &lt;li&gt;Basic programming concepts (data types, syntax, data structures, control structures, and control flow)&lt;/li&gt;
  &lt;li&gt;Beginning to intermediate JavaScript&lt;/li&gt;
  &lt;li&gt;Familiarity with AngularJS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Great to have but not required:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Familiarity with MVC/MVVM design pattern/frameworks&lt;/li&gt;
  &lt;li&gt;JavaScript debugging&lt;/li&gt;
  &lt;li&gt;Familiarity with source control (Git/SVN)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below are some resources for a basic understanding of the aforementioned concepts, languages and frameworks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/courses/javascript-road-trip-part-1&quot;&gt;JavaScript Roadtrip&lt;/a&gt; (FREE)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/courses/javascript-road-trip-part-2&quot;&gt;JavaScript Roadtrip Part 2&lt;/a&gt; or equivalent &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;Shaping up with AngularJS&lt;/a&gt; (FREE)&lt;/p&gt;

&lt;p&gt;Great to have (but not required): &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/courses/discover-devtools&quot;&gt;Discover DevTools&lt;/a&gt; (FREE) &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeschool.com/courses/try-git&quot;&gt;Try Git&lt;/a&gt; (FREE)&lt;/p&gt;

&lt;p&gt;The course will take place at the &lt;a href=&quot;http://bitwiseindustries.com&quot;&gt;Bitwise Industries&lt;/a&gt; facilities and will include 36-hours of in-person instruction. If you haven’t already, &lt;a href=&quot;http://geekwiseacademy.com/courses&quot;&gt;enroll now!&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://pixelpolished.com/geekwise/2014/09/18/web-applications-in-javascript/</link>
        <guid isPermaLink="true">http://pixelpolished.com/geekwise/2014/09/18/web-applications-in-javascript/</guid>
        
        
        <category>geekwise</category>
        
      </item>
    
      <item>
        <title>Testing FOUC with AngularJS (Mac)</title>
        <description>&lt;p&gt;At &lt;a href=&quot;http://onfarm.com&quot;&gt;OnFarm Systems&lt;/a&gt; we’ve made it a practice to favor the &lt;a href=&quot;https://docs.angularjs.org/api/ng/directive/ngBind&quot;&gt;ngBind&lt;/a&gt; directive over “mustache” (double curly braces) bindings to avoid &lt;abbr title=&quot;Flash Of Un-styled Content&quot;&gt;FOUC&lt;/abbr&gt; in our application. In the agricultural industry it is not uncommon for farmers to access our app over a cellular connection on their touch pad device as they’re physically walking through the farm. &lt;/p&gt;

&lt;p&gt;Recently, our development team received a bug and screen capture of one of our widgets with all of it’s braces “hanging out”. Turns out, the built-in template for the &lt;a href=&quot;http://angular-ui.github.io&quot;&gt;Angular UI&lt;/a&gt; &lt;a href=&quot;http://angular-ui.github.io/ng-grid/&quot;&gt;NG-Grid&lt;/a&gt; directive is using the “mustache” binding syntax.&lt;/p&gt;

&lt;p&gt;The following steps are the ones I took to reproduce the error on an otherwise decent internet connection.&lt;/p&gt;

&lt;h2 id=&quot;step-1-clear-the-cache&quot;&gt;Step 1: Clear the cache&lt;/h2&gt;

&lt;p&gt;Angular somewhat aggressively caches template partials using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$templateCache&quot;&gt;$templateCache&lt;/a&gt; service. I found that disabling caching (while DevTools is open) was not enough to bust the cache and assist in reproducing the error. In retrospect, I’m giving you the instructions for clearing the file cache history as the first step.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;chrome://settings/clearBrowserData&quot;&gt;chrome://settings/clearBrowserData&lt;/a&gt; in Chrome. Select “the beginning of time” and check the “Cached images and files” checkbox. Click “Clear browsing data” to clear the cache:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/chrome-clear-cache.png&quot; title=&quot;Clear Chrome cache&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-download-hardware-io-tools&quot;&gt;Step 2: Download Hardware IO Tools&lt;/h2&gt;

&lt;p&gt;If you haven’t downloaded and installed &lt;a href=&quot;https://developer.apple.com/xcode/downloads/&quot;&gt;Xcode&lt;/a&gt;, do so now. With Xcode installed, you will need to install the additional Hardware IO tools. Open Xcode, go to Xcode &amp;gt; Open Developer Tool &amp;gt; More Developer Tools. . . select “Hardware IO Tools for Xcode”. From the Apple Developers downloads page, select and download the Hardware IO Tools disk image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/hardware-io-download.png&quot; alt=&quot;Hardware IO download&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-install-the-network-link-conditioner&quot;&gt;Step 3: Install the Network Link Conditioner&lt;/h2&gt;

&lt;p&gt;Once you’ve downloaded the disk image, double click and mount it. Select the Network Link Conditioner.prefPane installer as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/hardware-io-dmg.png&quot; alt=&quot;Hardware IO installation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Network Link Conditioner and link to it in System Preferences will be installed and will automatically open the Network Link Conditioner as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/network-high-latency.png&quot; alt=&quot;Network High Latency&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-select-or-create-a-profile&quot;&gt;Step 4: Select or create a profile&lt;/h2&gt;

&lt;p&gt;I wasn’t able to reproduce the error using the 3G or network latency profile so I created a custom “Dial-up” profile. Standard Dial-up download speeds are about 52,000 b/s (52K) in perfect laboratory conditions and about 40,000 b/s if you’re close to the telephone office. As distance increases, speed decreases. Upload speeds average about 6 Kb/s and I’ve given a generous packet drop rate of 10%. You can view my profile options below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/network-custom-dial-up.png&quot; alt=&quot;Network Dial-up&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-5-turn-on-the-network-link-conditioner&quot;&gt;Step 5: Turn on the Network Link Conditioner&lt;/h1&gt;

&lt;p&gt;Using the Dial-up profile was a bit overkill, but it successfully reproduced the FOUC originally reported:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fouc/crop-protection.png&quot; alt=&quot;FOUC&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Unfortunately, the Angular UI team has not provided both a templated and non-templated version of the NG-Grid directive as they’ve done with the &lt;a href=&quot;http://angular-ui.github.io/bootstrap/&quot;&gt;UI-Bootstrap&lt;/a&gt; library. To fix the FOUC, the &lt;a href=&quot;https://docs.angularjs.org/api/ng/directive/ngCloak&quot;&gt;ngCloack&lt;/a&gt; directive on the parent element was not sufficient.  We had to download the un-minified source, update the templates and then concatenate and minify a custom build. A pull-request to the NG-Grid repo will follow shortly.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 00:00:00 -0700</pubDate>
        <link>http://pixelpolished.com/angularjs/2014/08/28/testing-fouc-angularjs-mac/</link>
        <guid isPermaLink="true">http://pixelpolished.com/angularjs/2014/08/28/testing-fouc-angularjs-mac/</guid>
        
        
        <category>angularjs</category>
        
      </item>
    
      <item>
        <title>Geekwise Academy: JavaScript II with AngularJS</title>
        <description>&lt;p&gt;Learn intermediate to advanced JavaScript skills using Google’s AngularJS framework for developing rich internet applications. This class also introduces students to creating an API with JSON, Node.js and MongoDB.&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href=&quot;http://pixelpolished.com/geekwise/&quot;&gt;course overview&lt;/a&gt; page to learn more and get started learning!&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Jul 2014 08:11:05 -0700</pubDate>
        <link>http://pixelpolished.com/geekwise/2014/07/18/javascript-2-with-angularjs/</link>
        <guid isPermaLink="true">http://pixelpolished.com/geekwise/2014/07/18/javascript-2-with-angularjs/</guid>
        
        
        <category>geekwise</category>
        
      </item>
    
  </channel>
</rss>
